# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-02-15 12:28
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import filebrowser_safe.fields
import mezzanine.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pages', '0003_auto_20150527_1555'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pages.Page')),
                ('full_text', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='The full activity text', verbose_name='full text')),
                ('goals', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='What are the overall aims of the activity.', verbose_name='goals')),
                ('summary', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='A catchy introductory paragraph.', verbose_name='summary')),
                ('observing_time', models.IntegerField(blank=True, null=True, verbose_name='Observing time')),
                ('archive_data', models.BooleanField(default=False, verbose_name='Archive data')),
                ('planning', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='What do you need to do in preparation.', verbose_name='planning')),
                ('background', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='What background information would useful to a non-specialist.', verbose_name='background')),
                ('next_steps', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='What can the audience do after this activity?', verbose_name='next steps')),
                ('featured_image', filebrowser_safe.fields.FileBrowseField(blank=True, max_length=200, null=True, verbose_name=b'Image')),
                ('related_posts', models.ManyToManyField(blank=True, related_name='_activity_related_posts_+', to='lcogt.Activity', verbose_name='Related activities')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activitys', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'ordering': ('_order',),
                'db_table': 'lcogt_activity',
            },
            bases=('pages.page', models.Model),
        ),
        migrations.CreateModel(
            name='LCOPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pages.Page')),
                ('content', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='Main content', verbose_name='Content')),
                ('extra_info', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='This information will appear in the side bar', verbose_name='extra information')),
                ('no_side_block', models.BooleanField(default=False, help_text="Check this if you don't want a side block", verbose_name='No side block')),
            ],
            options={
                'ordering': ('_order',),
                'db_table': 'lcogt_lcopage',
                'verbose_name': 'Page+',
                'verbose_name_plural': 'Pages+',
            },
            bases=('pages.page',),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mugshot', filebrowser_safe.fields.FileBrowseField(blank=True, max_length=200, null=True, verbose_name='Mugshot')),
                ('bio', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='This field can contain HTML and should contain a few paragraphs describing the background of the person.', verbose_name='biography')),
                ('job_title', models.CharField(blank=True, help_text='Example: Observatory Director', max_length=60, verbose_name='job title')),
                ('research_interests', models.CharField(blank=True, help_text='Comma separated list', max_length=255, verbose_name='research interests')),
                ('current', models.BooleanField(default=True, verbose_name='current staff')),
                ('science_team', models.BooleanField(default=False, verbose_name='member of the science team')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'lcogt_profile',
                'verbose_name': 'LCOGT Person',
                'verbose_name_plural': 'LCOGT People',
            },
        ),
        migrations.CreateModel(
            name='Seminar',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pages.Page')),
                ('abstract', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='What the talk will be about.', verbose_name='abstract')),
                ('seminardate', models.DateTimeField(default=datetime.datetime(2016, 2, 15, 12, 28, 25, 399602), verbose_name='Seminar date/time')),
                ('speaker_name', models.CharField(blank=True, max_length=255, null=True)),
                ('speaker_institute', models.CharField(blank=True, max_length=255, null=True)),
                ('speaker_picture', filebrowser_safe.fields.FileBrowseField(blank=True, max_length=200, null=True, verbose_name='Speaker mugshot')),
                ('speaker_biog', mezzanine.core.fields.RichTextField(blank=True, default=b'', help_text='This field can contain HTML and should contain a few paragraphs describing the background of the person.', verbose_name='biography')),
                ('speaker_link', models.URLField(help_text="Link to speaker's institutional page.")),
            ],
            options={
                'ordering': ('_order',),
                'db_table': 'lcogt_seminar',
            },
            bases=('pages.page',),
        ),
    ]
